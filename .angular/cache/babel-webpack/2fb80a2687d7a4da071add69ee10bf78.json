{"ast":null,"code":"import { BehaviorSubject, from, fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let IoPlayerService = /*#__PURE__*/(() => {\n  class IoPlayerService {\n    constructor() {\n      this._isPlaying = false;\n      this.subscriptions = [];\n      this._isPlaying$ = new BehaviorSubject(this._isPlaying);\n    }\n\n    ngOnDestroy() {\n      if (this._isPlaying) {\n        this.pause();\n      }\n\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n    /**\n     * @description initiatize audio player.\n     */\n\n\n    init(source) {\n      this._audio = document.createElement('audio');\n      this._audio.src = source;\n      this.audioFinish$.subscribe(() => this.pause());\n    }\n    /**\n     * @description API to play current player.\n     */\n\n\n    play() {\n      if (!this._isPlaying) {\n        from(this._audio.play()).subscribe(() => {\n          this.toggleIsPlaying();\n        });\n      }\n    }\n    /**\n     * @description API to pause player.\n     */\n\n\n    pause() {\n      if (!this._isPlaying) return;\n\n      this._audio.pause();\n\n      this.toggleIsPlaying();\n    }\n\n    forward(offset = 10.0) {\n      if (!this._isPlaying) return;\n      this._audio.currentTime += offset;\n    }\n\n    backward(offset = 10.0) {\n      if (!this._isPlaying) return;\n      this._audio.currentTime -= offset;\n    }\n    /**\n     * @description ask for specific pourcentage position.\n     */\n\n\n    readFromPercentage(percentage) {\n      this._audio.currentTime = this._audio.duration * percentage / 100;\n    }\n    /**\n     * @description switch isPlaying state.\n     */\n\n\n    toggleIsPlaying() {\n      this._isPlaying = !this._isPlaying;\n\n      this._isPlaying$.next(this._isPlaying);\n    }\n    /**\n     * @description observable of current percentage position in audio.\n     */\n\n\n    get percentageReaded$() {\n      return fromEvent(this._audio, 'timeupdate').pipe(map(() => {\n        return this._audio.currentTime / this._audio.duration * 100;\n      }));\n    }\n    /**\n     * @description observable who notify when 'ended' audio event is fire.\n     */\n\n\n    get audioFinish$() {\n      return fromEvent(this._audio, 'ended').pipe(map(() => {\n        return null;\n      }));\n    }\n    /**\n     * @description Observable to determine if current sound is playing or not.\n     */\n\n\n    get isPlaying$() {\n      return this._isPlaying$.asObservable();\n    }\n\n  }\n\n  IoPlayerService.ɵfac = function IoPlayerService_Factory(t) {\n    return new (t || IoPlayerService)();\n  };\n\n  IoPlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IoPlayerService,\n    factory: IoPlayerService.ɵfac\n  });\n  return IoPlayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}